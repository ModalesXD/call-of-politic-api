generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PLAYER
  NPC
  ADMIN
}

enum VoteType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum ElectionStatus {
  PENDING
  ACTIVE
  FINISHED
  CANCELLED
}

enum ResourceType {
  NATURAL // Petróleo, minerales, etc.
  MANUFACTURED // Productos procesados
  AGRICULTURAL // Productos agrícolas
  TECHNOLOGY // Productos tecnológicos
  SERVICE // Servicios
}

enum ConfigType {
  GAME // Configuraciones globales del juego
  PLAYER // Configuraciones de jugador
  ECONOMY // Configuraciones económicas
  POLITICS // Configuraciones políticas
}

enum MarketOrderType {
  BUY
  SELL
}

enum TaxType {
  INCOME // Impuesto sobre la renta
  SALES // IVA
  PROPERTY // Impuesto predial
  IMPORT // Aranceles
  CORPORATE // Impuesto corporativo
}

enum WarStatus {
  ONGOING
  ENDED
}

enum WarRole {
  ATTACKER
  DEFENDER
}

enum WarType {
  CONQUEST
  DEFENSE
  REVOLUTION
  CIVIL
}

enum WarScope {
  LOCAL
  REGIONAL
  GLOBAL
}

model BaseUser {
  id         String   @id @default(cuid())
  name       String
  image      String?
  countryId  String
  ideologyId String
  rankId     String
  type       UserType
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  country  Country  @relation(fields: [countryId], references: [id])
  ideology Ideology @relation(fields: [ideologyId], references: [id])
  rank     Rank     @relation(fields: [rankId], references: [id])

  player Player?
  npc    Npc?

  @@index([name])
  @@index([countryId])
  @@index([type])
  @@map("base_users")
}

model Player {
  id          String    @id
  baseUser    BaseUser  @relation(fields: [id], references: [id])
  discordId   String?   @unique
  email       String?   @unique
  lastLoginAt DateTime?
  experience  Int       @default(0)
  level       Int       @default(1)
  balance     Float     @default(0) // Balance del jugador

  votes        Vote[]              @relation("PlayerVotes")
  voterVotes   Vote[]              @relation("VoterPlayerVotes")
  elections    PlayerElections[]
  achievements PlayerAchievement[]
  configs      PlayerConfig[]
  marketOrders MarketOrder[]
  buyerTrades  Trade[]             @relation("BuyerTrades")
  sellerTrades Trade[]             @relation("SellerTrades")

  @@map("players")
}

model Npc {
  id         String   @id
  baseUser   BaseUser @relation(fields: [id], references: [id])
  behavior   String? // Patrón de comportamiento del NPC
  difficulty Int      @default(1)
  isHostile  Boolean  @default(false)

  votes           Vote[]            @relation("NpcVotes")
  voterVotes      Vote[]            @relation("VoterNpcVotes")
  playerElections PlayerElections[]

  @@map("npcs")
}

model Announcement {
  id         String    @id @default(cuid())
  title      String    @db.VarChar(255)
  content    String    @db.Text
  countryId  String
  categoryId String
  imageUrl   String?
  isActive   Boolean   @default(true)
  priority   Int       @default(0)
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  country  Country  @relation(fields: [countryId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@index([title])
  @@index([countryId])
  @@index([categoryId])
  @@index([isActive])
  @@map("announcements")
}

model Rank {
  id          String     @id @default(cuid())
  name        String     @unique
  image       String?
  description String?    @db.Text
  permission  String[] // Array de permisos
  level       Int        @default(1)
  isActive    Boolean    @default(true)
  baseUsers   BaseUser[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([name])
  @@index([level])
  @@map("ranks")
}

model Country {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique @db.VarChar(3)
  image       String?
  population  Int      @default(0)
  gdp         Float    @default(0)
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  baseUsers     BaseUser[]
  announcements Announcement[]
  cities        City[]
  states        State[]
  events        Event[]
  statistics    Statistic[]
  elections     Elections[]
  resources     CountryResource[]
  economy       Economy?
  alliances     Alliance[] 
  warHistory    WarCountry[] // Historial de guerras en las que ha participado
  territories   Territory[]  // Territorios dentro del país

  @@index([name])
  @@index([code])
  @@index([isActive])
  @@map("countries")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  parentId    String? // Para categorías jerárquicas
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  announcements Announcement[]
  events        Event[]

  @@index([name])
  @@index([parentId])
  @@index([isActive])
  @@map("categories")
}

model Ideology {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  image       String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  baseUsers BaseUser[]

  @@index([name])
  @@map("ideologies")
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  playerId String?
  npcId    String?
  player   Player? @relation("PlayerVotes", fields: [playerId], references: [id])
  npc      Npc?    @relation("NpcVotes", fields: [npcId], references: [id])

  voterPlayerId String?
  voterNpcId    String?
  voterPlayer   Player? @relation("VoterPlayerVotes", fields: [voterPlayerId], references: [id])
  voterNpc      Npc?    @relation("VoterNpcVotes", fields: [voterNpcId], references: [id])

  @@index([type])
  @@index([playerId])
  @@index([npcId])
  @@index([voterPlayerId])
  @@index([voterNpcId])
  @@map("votes")
}

model Elections {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  countryId   String
  startDate   DateTime
  endDate     DateTime
  status      ElectionStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())

  country    Country           @relation(fields: [countryId], references: [id])
  candidates PlayerElections[]

  @@index([countryId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("elections")
}

model PlayerElections {
  id         String   @id @default(cuid())
  electionId String
  playerId   String?
  npcId      String?
  votes      Int      @default(0)
  position   String? // Posición o cargo al que aspira
  manifesto  String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  election Elections @relation(fields: [electionId], references: [id])
  player   Player?   @relation(fields: [playerId], references: [id])
  npc      Npc?      @relation(fields: [npcId], references: [id])

  @@index([electionId])
  @@index([playerId])
  @@index([npcId])
  @@index([votes])
  @@map("player_elections")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  countryId   String
  categoryId  String
  impact      Int       @default(0)
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  country  Country  @relation(fields: [countryId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@index([countryId])
  @@index([categoryId])
  @@index([isActive])
  @@index([startDate])
  @@map("events")
}

model City {
  id          String   @id @default(cuid())
  name        String
  countryId   String
  stateId     String?
  population  Int      @default(0)
  coordinates Json?    // Coordenadas geográficas (latitud, longitud)
  territoryId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     Country    @relation(fields: [countryId], references: [id])
  state       State?     @relation(fields: [stateId], references: [id])
  territory   Territory? @relation(fields: [territoryId], references: [id])

  @@index([name])
  @@index([countryId])
  @@index([stateId])
  @@map("cities")
}

model Territory {
  id          String   @id @default(cuid())
  name        String
  countryId   String
  coordinates Json?    // Coordenadas geográficas (puede ser una lista de puntos o área)
  area        Float?   // El área del territorio, si se necesita
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  country     Country  @relation(fields: [countryId], references: [id])
  cities      City[]   // Ciudades dentro del territorio (si es aplicable)

  @@index([name])
  @@index([countryId])
  @@map("territories")
}


model State {
  id         String   @id @default(cuid())
  name       String
  countryId  String
  coordinates Json?
  population Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  country Country @relation(fields: [countryId], references: [id])
  cities  City[]

  @@index([name])
  @@index([countryId])
  @@map("states")
}

model Statistic {
  id        String   @id @default(cuid())
  countryId String
  type      String // Tipo de estadística
  value     Float
  date      DateTime @default(now())

  country Country @relation(fields: [countryId], references: [id])

  @@index([countryId])
  @@index([type])
  @@index([date])
  @@map("statistics")
}

model PlayerAchievement {
  id          String   @id @default(cuid())
  playerId    String
  name        String
  description String?  @db.Text
  unlockedAt  DateTime @default(now())

  player Player @relation(fields: [playerId], references: [id])

  @@index([playerId])
  @@index([name])
  @@map("player_achievements")
}

model Config {
  id          String     @id @default(cuid())
  type        ConfigType
  key         String     // Nombre de la configuración
  value       String     // Valor en formato JSON
  description String?    @db.Text
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([type, key])  // Ensures unique configuration per type and key
  @@index([type])
  @@index([key])
  @@map("configs")
}

model PlayerConfig {
  id        String   @id @default(cuid())
  playerId  String
  key       String // Nombre de la configuración
  value     String // Valor en formato JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  player Player @relation(fields: [playerId], references: [id])

  @@unique([playerId, key])
  @@map("player_configs")
}

model Resource {
  id          String       @id @default(cuid())
  name        String       @unique
  type        ResourceType
  description String?      @db.Text
  basePrice   Float        @default(0)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  countryResources CountryResource[]
  marketOrders     MarketOrder[]
  tradeItems       TradeItem[]

  @@index([type])
  @@index([isActive])
  @@map("resources")
}

model CountryResource {
  id         String   @id @default(cuid())
  countryId  String
  resourceId String
  amount     Float    @default(0)
  production Float    @default(0) // Producción por hora
  capacity   Float    @default(0) // Capacidad máxima de almacenamiento
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  country  Country  @relation(fields: [countryId], references: [id])
  resource Resource @relation(fields: [resourceId], references: [id])

  @@unique([countryId, resourceId])
  @@index([countryId])
  @@map("country_resources")
}

model Economy {
  id           String   @id @default(cuid())
  countryId    String   @unique
  treasury     Float    @default(0) // Fondos del gobierno
  gdpGrowth    Float    @default(0) // Crecimiento del PIB
  inflation    Float    @default(0) // Tasa de inflación
  unemployment Float    @default(0) // Tasa de desempleo
  debt         Float    @default(0) // Deuda nacional
  creditRating String   @default("C") // Calificación crediticia
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  country Country @relation(fields: [countryId], references: [id])
  taxes   Tax[]
  logs    EconomyLog[]

  @@map("economies")
}

model EconomyLog {
  id        String   @id @default(cuid())
  economyId String
  message   String
  createdAt DateTime @default(now())

  economy Economy @relation(fields: [economyId], references: [id])

  @@index([economyId])
  @@map("economy_logs")
}

model Tax {
  id          String   @id @default(cuid())
  economyId   String
  type        TaxType
  rate        Float    @default(0) // Tasa impositiva
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  economy Economy @relation(fields: [economyId], references: [id])

  @@unique([economyId, type])
  @@map("taxes")
}

model MarketOrder {
  id         String          @id @default(cuid())
  type       MarketOrderType
  resourceId String
  playerId   String
  amount     Float
  price      Float
  fulfilled  Float           @default(0)
  status     String          @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  expiresAt  DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now())

  resource Resource @relation(fields: [resourceId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])
  trades   Trade[]

  @@index([type])
  @@index([status])
  @@index([playerId])
  @@map("market_orders")
}

model Trade {
  id            String   @id @default(cuid())
  marketOrderId String
  buyerId       String
  sellerId      String
  amount        Float
  price         Float
  totalPrice    Float
  status        String   @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  marketOrder MarketOrder @relation(fields: [marketOrderId], references: [id])
  buyer       Player      @relation("BuyerTrades", fields: [buyerId], references: [id])
  seller      Player      @relation("SellerTrades", fields: [sellerId], references: [id])

  items       TradeItem[]
  logs        TradeLog[]
  history     TradeHistory[]

  @@index([status])
  @@index([buyerId])
  @@index([sellerId])
  @@map("trades")
}

model TradeItem {
  id         String   @id @default(cuid())
  tradeId    String
  resourceId String
  amount     Float
  price      Float
  createdAt  DateTime @default(now())

  trade    Trade    @relation(fields: [tradeId], references: [id])
  resource Resource @relation(fields: [resourceId], references: [id])

  @@index([tradeId])
  @@map("trade_items")
}

model TradeLog {
  id        String   @id @default(cuid())
  tradeId   String
  message   String
  createdAt DateTime @default(now())

  trade Trade @relation(fields: [tradeId], references: [id])

  @@index([tradeId])
  @@map("trade_logs")
}

model TradeHistory {
  id        String   @id @default(cuid())
  tradeId   String
  status    String
  createdAt DateTime @default(now())

  trade Trade @relation(fields: [tradeId], references: [id])

  @@index([tradeId])
  @@map("trade_histories")
}

model War {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  startDate   DateTime
  endDate     DateTime?
  status      WarStatus     @default(ONGOING)
  type        WarType
  scope       WarScope
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relación Many-to-Many con Country a través de WarCountry
  participants WarCountry[]
  alliances    Alliance[]

  @@index([status])
}

model WarCountry {
  id        String   @id @default(cuid())
  warId     String
  countryId String
  role      WarRole  // Define si el país es atacante o defensor
  createdAt DateTime @default(now())

  war     War      @relation(fields: [warId], references: [id], onDelete: Cascade)
  country Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([warId, countryId]) // Asegura que un país no esté dos veces en la misma guerra
}

model Alliance {
  id        String   @id @default(cuid())
  warId     String
  countryId String
  playerId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  war       War      @relation(fields: [warId], references: [id], onDelete: Cascade)
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([warId, countryId]) 
  @@index([playerId])
}

model Season {
  id        String @id @default(cuid())
  season    Int @default(autoincrement())
  description String?
  data      String
  isActive Boolean
  createdAt DateTime @default(now())
  updated   DateTime @default(now())
  endDate   DateTime?
}